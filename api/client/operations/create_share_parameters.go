package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/opensds/opensds/api/models"
)

// NewCreateShareParams creates a new CreateShareParams object
// with the default values initialized.
func NewCreateShareParams() *CreateShareParams {
	var ()
	return &CreateShareParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCreateShareParamsWithTimeout creates a new CreateShareParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCreateShareParamsWithTimeout(timeout time.Duration) *CreateShareParams {
	var ()
	return &CreateShareParams{

		timeout: timeout,
	}
}

// NewCreateShareParamsWithContext creates a new CreateShareParams object
// with the default values initialized, and the ability to set a context for a request
func NewCreateShareParamsWithContext(ctx context.Context) *CreateShareParams {
	var ()
	return &CreateShareParams{

		Context: ctx,
	}
}

// NewCreateShareParamsWithHTTPClient creates a new CreateShareParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCreateShareParamsWithHTTPClient(client *http.Client) *CreateShareParams {
	var ()
	return &CreateShareParams{
		HTTPClient: client,
	}
}

/*CreateShareParams contains all the parameters to send to the API endpoint
for the create share operation typically these are written to a http.Request
*/
type CreateShareParams struct {

	/*ResourceType
	  Type of specified share backend resource

	*/
	ResourceType string
	/*ShareRequest
	  Share request object

	*/
	ShareRequest *models.ShareRequest

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the create share params
func (o *CreateShareParams) WithTimeout(timeout time.Duration) *CreateShareParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create share params
func (o *CreateShareParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create share params
func (o *CreateShareParams) WithContext(ctx context.Context) *CreateShareParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create share params
func (o *CreateShareParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create share params
func (o *CreateShareParams) WithHTTPClient(client *http.Client) *CreateShareParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create share params
func (o *CreateShareParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithResourceType adds the resourceType to the create share params
func (o *CreateShareParams) WithResourceType(resourceType string) *CreateShareParams {
	o.SetResourceType(resourceType)
	return o
}

// SetResourceType adds the resourceType to the create share params
func (o *CreateShareParams) SetResourceType(resourceType string) {
	o.ResourceType = resourceType
}

// WithShareRequest adds the shareRequest to the create share params
func (o *CreateShareParams) WithShareRequest(shareRequest *models.ShareRequest) *CreateShareParams {
	o.SetShareRequest(shareRequest)
	return o
}

// SetShareRequest adds the shareRequest to the create share params
func (o *CreateShareParams) SetShareRequest(shareRequest *models.ShareRequest) {
	o.ShareRequest = shareRequest
}

// WriteToRequest writes these params to a swagger request
func (o *CreateShareParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	r.SetTimeout(o.timeout)
	var res []error

	// path param resourceType
	if err := r.SetPathParam("resourceType", o.ResourceType); err != nil {
		return err
	}

	if o.ShareRequest == nil {
		o.ShareRequest = new(models.ShareRequest)
	}

	if err := r.SetBodyParam(o.ShareRequest); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
